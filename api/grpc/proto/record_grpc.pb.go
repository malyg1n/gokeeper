// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/grpc/proto/record.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecorderClient is the client API for Recorder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecorderClient interface {
	CreateRecord(ctx context.Context, in *RecordCreateRequest, opts ...grpc.CallOption) (*RecordCreatedResponse, error)
	UpdateRecord(ctx context.Context, in *RecordUpdatedResponse, opts ...grpc.CallOption) (*RecordUpdatedResponse, error)
	DeleteRecord(ctx context.Context, in *RecordDeleteRequest, opts ...grpc.CallOption) (*RecordDeletedResponse, error)
	GetRecord(ctx context.Context, in *RecordGetRequest, opts ...grpc.CallOption) (*RecordResponse, error)
	GetRecords(ctx context.Context, in *RecordUpdatedResponse, opts ...grpc.CallOption) (*RecordsResponse, error)
}

type recorderClient struct {
	cc grpc.ClientConnInterface
}

func NewRecorderClient(cc grpc.ClientConnInterface) RecorderClient {
	return &recorderClient{cc}
}

func (c *recorderClient) CreateRecord(ctx context.Context, in *RecordCreateRequest, opts ...grpc.CallOption) (*RecordCreatedResponse, error) {
	out := new(RecordCreatedResponse)
	err := c.cc.Invoke(ctx, "/record.Recorder/CreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) UpdateRecord(ctx context.Context, in *RecordUpdatedResponse, opts ...grpc.CallOption) (*RecordUpdatedResponse, error) {
	out := new(RecordUpdatedResponse)
	err := c.cc.Invoke(ctx, "/record.Recorder/UpdateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) DeleteRecord(ctx context.Context, in *RecordDeleteRequest, opts ...grpc.CallOption) (*RecordDeletedResponse, error) {
	out := new(RecordDeletedResponse)
	err := c.cc.Invoke(ctx, "/record.Recorder/DeleteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) GetRecord(ctx context.Context, in *RecordGetRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/record.Recorder/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) GetRecords(ctx context.Context, in *RecordUpdatedResponse, opts ...grpc.CallOption) (*RecordsResponse, error) {
	out := new(RecordsResponse)
	err := c.cc.Invoke(ctx, "/record.Recorder/GetRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecorderServer is the server API for Recorder service.
// All implementations must embed UnimplementedRecorderServer
// for forward compatibility
type RecorderServer interface {
	CreateRecord(context.Context, *RecordCreateRequest) (*RecordCreatedResponse, error)
	UpdateRecord(context.Context, *RecordUpdatedResponse) (*RecordUpdatedResponse, error)
	DeleteRecord(context.Context, *RecordDeleteRequest) (*RecordDeletedResponse, error)
	GetRecord(context.Context, *RecordGetRequest) (*RecordResponse, error)
	GetRecords(context.Context, *RecordUpdatedResponse) (*RecordsResponse, error)
	mustEmbedUnimplementedRecorderServer()
}

// UnimplementedRecorderServer must be embedded to have forward compatible implementations.
type UnimplementedRecorderServer struct {
}

func (UnimplementedRecorderServer) CreateRecord(context.Context, *RecordCreateRequest) (*RecordCreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedRecorderServer) UpdateRecord(context.Context, *RecordUpdatedResponse) (*RecordUpdatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecord not implemented")
}
func (UnimplementedRecorderServer) DeleteRecord(context.Context, *RecordDeleteRequest) (*RecordDeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedRecorderServer) GetRecord(context.Context, *RecordGetRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedRecorderServer) GetRecords(context.Context, *RecordUpdatedResponse) (*RecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecords not implemented")
}
func (UnimplementedRecorderServer) mustEmbedUnimplementedRecorderServer() {}

// UnsafeRecorderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecorderServer will
// result in compilation errors.
type UnsafeRecorderServer interface {
	mustEmbedUnimplementedRecorderServer()
}

func RegisterRecorderServer(s grpc.ServiceRegistrar, srv RecorderServer) {
	s.RegisterService(&Recorder_ServiceDesc, srv)
}

func _Recorder_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.Recorder/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).CreateRecord(ctx, req.(*RecordCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordUpdatedResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.Recorder/UpdateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).UpdateRecord(ctx, req.(*RecordUpdatedResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.Recorder/DeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).DeleteRecord(ctx, req.(*RecordDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.Recorder/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).GetRecord(ctx, req.(*RecordGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_GetRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordUpdatedResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).GetRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/record.Recorder/GetRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).GetRecords(ctx, req.(*RecordUpdatedResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// Recorder_ServiceDesc is the grpc.ServiceDesc for Recorder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recorder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "record.Recorder",
	HandlerType: (*RecorderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecord",
			Handler:    _Recorder_CreateRecord_Handler,
		},
		{
			MethodName: "UpdateRecord",
			Handler:    _Recorder_UpdateRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _Recorder_DeleteRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _Recorder_GetRecord_Handler,
		},
		{
			MethodName: "GetRecords",
			Handler:    _Recorder_GetRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/proto/record.proto",
}
